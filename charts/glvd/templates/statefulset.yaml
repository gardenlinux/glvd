apiVersion: v1
kind: Service
metadata:
  name: glvd-database
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: glvd
    helm.sh/chart: glvd
    app.kubernetes.io/instance: {{ .Release.Name }}
    gardenlinux.io/glvd-component: database
spec:
  selector:
    app.kubernetes.io/name: glvd
    app.kubernetes.io/instance: {{ .Release.Name }}
    gardenlinux.io/glvd-component: database
  ports:
    - protocol: TCP
      port: 5432
      name: postgres
      targetPort: postgres
  type: ClusterIP
  clusterIP: None
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: glvd-database
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: glvd
    helm.sh/chart: glvd
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: 1
  serviceName: "glvd-database"
  selector:
    matchLabels:
      app.kubernetes.io/name: glvd
      helm.sh/chart: glvd
      app.kubernetes.io/instance: {{ .Release.Name }}
      gardenlinux.io/glvd-component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: glvd
        helm.sh/chart: glvd
        app.kubernetes.io/instance: {{ .Release.Name }}
        gardenlinux.io/glvd-component: database
    spec:
      terminationGracePeriodSeconds: 120
      containers:
      - image: {{ .Values.database.image }}
        name: postgres-db
        resources:
{{- toYaml .Values.database.resources | nindent 10 }}
        ports:
        - containerPort: {{ .Values.database.port }}
        livenessProbe:
          httpGet:
            path: "/actuator/health/liveness"
            port: 8080
        readinessProbe:
          httpGet:
            path: "/actuator/health/readiness"
            port: 8080
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-creds
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-creds
              key: password
        - name: POSTGRES_DATABASE
          valueFrom:
            configMapKeyRef:
              name: postgres-settings
              key: postgres_database
        - name: POSTGRES_HOST
          valueFrom:
            configMapKeyRef:
              name: postgres-settings
              key: postgres_host
        - name: POSTGRES_PORT
          value: {{ .Values.database.port | quote }}
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - mountPath: "/var/lib/postgresql/data"
          name: postgres-storage
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.database.volumeSize }}
      storageClassName: 'default'
