apiVersion: v1
kind: Service
metadata:
  name: glvd-database
  labels:
    app.kubernetes.io/name: glvd
    gardenlinux.io/glvd-component: database
spec:
  selector:
    app.kubernetes.io/name: glvd
    gardenlinux.io/glvd-component: database
  ports:
    - protocol: TCP
      port: 5432
      name: postgres
      targetPort: postgres
  type: ClusterIP
  clusterIP: None
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: glvd-database-sa
automountServiceAccountToken: false
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: glvd-database
  labels:
    app.kubernetes.io/name: glvd
    gardenlinux.io/glvd-component: database
spec:
  replicas: 1
  serviceName: "glvd-database"
  selector:
    matchLabels:
      app.kubernetes.io/name: glvd
      gardenlinux.io/glvd-component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: glvd
        gardenlinux.io/glvd-component: database
    spec:
      serviceAccountName: glvd-database-sa
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
      - image: ghcr.io/gardenlinux/glvd-postgres:latest
        imagePullPolicy: Always
        name: glvd-postgres
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - '*'
        ports:
          - containerPort: 5432
            protocol: TCP
            name: postgres
        env:
          - name: POSTGRES_DATABASE
            value: glvd
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: postgres-credentials
                key: username
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-credentials
                key: password
          - name: POSTGRES_HOST
            value: glvd-postgres
          - name: POSTGRES_PORT
            value: "5432"
          - name: PGDATA
            value: /var/lib/postgresql/18/docker
        volumeMounts:
        - mountPath: "/var/lib/postgresql"
          name: postgres18-storage
        # Mount /var/run/postgresql (needed by Postgres) and /tmp (useful for storing db dumps temporarily) as emptyDir so we can have readOnlyRootFilesystem as true
        - mountPath: /var/run/postgresql
          name: var-run-volume
        - mountPath: /tmp
          name: tmp-volume
      volumes:
      - name: var-run-volume
        emptyDir:
          sizeLimit: 500Mi
      - name: tmp-volume
        emptyDir:
          sizeLimit: 500Mi
  volumeClaimTemplates:
  - metadata:
      name: postgres18-storage
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
  - metadata:
      name: postgres-backup
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
